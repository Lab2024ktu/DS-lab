#include <stdio.h>
#include <stdlib.h>
struct node {
    int data;
    struct node *next, *prev;
} *head = NULL;
void inB(int val);
void inE(int val);
void inS(int val, int loc);
void deB();
void deE();
void deS(int loc);
void dis();
int main() {
    int ch, val, loc;
    for (;;) {
        printf("\nA.Insert:\t1.At Beginning\t2.At End\t3.At Specific Location");
        printf("\nB.Delete:\t4.At Beginning\t5.At End\t6.At Specific Location");
        printf("\n7.Display\t8.Exit\tChoice: ");
        scanf("%d", &ch);
        switch (ch) {
            case 1:
                printf("Enter value: ");
                scanf("%d", &val);
                inB(val);
                break;
            case 2:
                printf("Enter value: ");
                scanf("%d", &val);
                inE(val);
                break;
            case 3:
                printf("Enter value: ");
                scanf("%d", &val);
                printf("Enter location: ");
                scanf("%d", &loc);
                inS(val, loc);
                break;
            case 4:
                deB();
                break;
            case 5:
                deE();
                break;
            case 6:
                printf("Enter location: ");
                scanf("%d", &loc);
                deS(loc);
                break;
            case 7:
                dis();
                break;
            case 8:
                return 0;
            default:
                printf("Invalid input");
        }
    }
}
void inB(int val) {
    struct node *newnode = (struct node *)malloc(sizeof(struct node));
    newnode->data = val;
    newnode->prev = NULL;
    newnode->next = head;
    if (head != NULL)
        head->prev = newnode;
    head = newnode;
}
void inE(int val) {
    struct node *newnode = (struct node *)malloc(sizeof(struct node));
    newnode->data = val;
    newnode->next = NULL;
    if (head == NULL) {
        newnode->prev = NULL;
        head = newnode;
    } else {
        struct node *temp = head;
        while (temp->next != NULL)
            temp = temp->next;
        newnode->prev = temp;
        temp->next = newnode;
    }
}
void inS(int val, int loc) {
    struct node *newnode = (struct node *)malloc(sizeof(struct node));
    newnode->data = val;
    if (loc == 1) {
        newnode->next = head;
        newnode->prev = NULL;
        if (head != NULL)
            head->prev = newnode;
        head = newnode;
        return;
    }
    struct node *temp = head;
    for (int i = 1; i < loc - 1; i++) {
        temp = temp->next;
        if (temp == NULL) {
            printf("Invalid location. The position is beyond the list length.\n");
            free(newnode);
            return;
        }
    }

    newnode->next = temp->next;
    newnode->prev = temp;

    if (temp->next != NULL)
        temp->next->prev = newnode;

    temp->next = newnode;
}
void deB() {
    if (head == NULL) {
        printf("Empty List\n");
        return;
    }
    struct node *temp = head;
    head = head->next;
    if (head != NULL)
        head->prev = NULL;
    free(temp);
}
void deE() {
    if (head == NULL) {
        printf("Empty List\n");
        return;
    }
    struct node *temp = head;
    if (head->next == NULL) {
        head = NULL;
    } else {
        while (temp->next != NULL)
            temp = temp->next;
        temp->prev->next = NULL;
    }
    free(temp);
}
void deS(int loc) {
    if (head == NULL) {
        printf("Empty List\n");
        return;
    }
    struct node *temp = head;
    if (loc == 1) {
        head = temp->next;
        if (head != NULL)
            head->prev = NULL;
        free(temp);
        return;
    }
    for (int i = 1; i < loc; i++) {
        temp = temp->next;
        if (temp == NULL) {
            printf("Invalid location. The position is beyond the list length.\n");
            return;
        }
    }
    if (temp->next != NULL)
        temp->next->prev = temp->prev;
    if (temp->prev != NULL)
        temp->prev->next = temp->next;
    free(temp);
}
void dis() {
    if (head == NULL) {
        printf("Empty List\n");
    } else {
        struct node *temp = head;
        printf("List: NULL<---");
        while (temp != NULL) {
            printf("%d", temp->data);
            if (temp->next != NULL)
                printf("<===>");
            temp = temp->next;
        }
        printf("--->NULL\n");
    }
}
